#!/usr/bin/env python3
"""
Integration test for the memory decay functionality.

This test verifies that the memory decay works correctly using a real ArangoDB instance.
It also verifies that when lowâ€‘importance facts fully decay (and are removed),
the tests account for that possibility.
"""

import os
import uuid
import pytest
import datetime
from typing import Dict, Any, List

from agent_tools.cursor_rules.core.memory.agent_memory import AgentMemorySystem
from agent_tools.cursor_rules.core.memory.memory_decay import (
    apply_memory_decay, 
    boost_memories,
    apply_targeted_decay,
    get_decay_statistics
)

# --------------------
# TEST CONFIGURATION
# --------------------
TEST_DB_NAME = "test_agent_memory_decay"
TEST_COLLECTION = "test_memory_facts"
TEST_USERNAME = os.environ.get("ARANGO_USERNAME", "root")
TEST_PASSWORD = os.environ.get("ARANGO_PASSWORD", "openSesame")

# Sample facts for testing
SAMPLE_FACTS = [
    {
        "content": "Elephants are the largest land mammals on Earth.",
        "importance": 0.8,
        "confidence": 0.9,
        "domains": ["zoology", "nature"],
        "ttl_days": 365.0
    },
    {
        "content": "The capital of France is Paris.",
        "importance": 0.7,
        "confidence": 0.95,
        "domains": ["geography", "europe"],
        "ttl_days": 730.0
    },
    {
        "content": "Water boils at 100 degrees Celsius at sea level.",
        "importance": 0.6,
        "confidence": 0.9,
        "domains": ["physics", "chemistry"],
        "ttl_days": 365.0
    },
    {
        "content": "The next AI conference is on November 10, 2023.",
        "importance": 0.5,
        "confidence": 0.8,
        "domains": ["ai", "events", "temporary"],
        "ttl_days": 60.0
    },
    {
        "content": "The current password for the test system is 'test123'.",
        "importance": 0.3,
        "confidence": 0.9,
        "domains": ["security", "temporary"],
        "ttl_days": 15.0
    }
]

# --------------------
# FIXTURE
# --------------------
@pytest.fixture
def memory_system():
    """Create and initialize a memory system for testing."""
    test_db = f"{TEST_DB_NAME}_{uuid.uuid4().hex[:8]}"
    config = {
        "arango_host": "http://localhost:8529",
        "username": TEST_USERNAME,
        "password": TEST_PASSWORD,
        "db_name": test_db,
        "facts_collection": TEST_COLLECTION,
        "embeddings_model": "all-MiniLM-L6-v2",  # Use a small model for tests
        "ttl_default_days": 365.0,
        "importance_decay_factor": 0.8,
        "recency_boost_factor": 0.4,
        "confidence_threshold": 0.3
    }
    
    memory_system = AgentMemorySystem(config)
    memory_system.initialize()
    
    for fact in SAMPLE_FACTS:
        memory_system.remember(**fact)
    
    yield memory_system
    
    try:
        memory_system.cleanup()
        from arango import ArangoClient
        client = ArangoClient(hosts=config["arango_host"])
        sys_db = client.db('_system', username=config["username"], password=config["password"])
        if sys_db.has_database(test_db):
            sys_db.delete_database(test_db)
    except Exception as e:
        print(f"Failed to cleanup test database: {e}")

# --------------------
# TESTS
# --------------------
def test_memory_decay_basic(memory_system):
    """Test that memory decay reduces TTL for all facts."""
    initial_stats = get_decay_statistics(memory_system)
    assert initial_stats["total_facts"] == len(SAMPLE_FACTS)
    
    apply_memory_decay(memory_system=memory_system, days_passed=30.0)
    
    new_stats = get_decay_statistics(memory_system)
    categories = [cat["category"] for cat in new_stats["ttl_categories"]]
    assert len(categories) > 0, "Should have decay category statistics"
    
    facts = list(memory_system.db.collection(TEST_COLLECTION).all())
    for fact in facts:
        assert "ttl_days" in fact, "All facts should have TTL"
        if "temporary" in fact.get("domains", []):
            assert fact["ttl_days"] < 15.0, "Temporary facts should decay faster"

def test_domain_preservation(memory_system):
    """Test that important domains are preserved from decay."""
    apply_memory_decay(memory_system=memory_system, days_passed=30.0, domains_to_preserve=["geography", "physics"])
    stats = get_decay_statistics(memory_system)
    assert sum(cat["count"] for cat in stats["ttl_categories"]) >= len(SAMPLE_FACTS), "All facts should be accounted for"
    
    facts = list(memory_system.db.collection(TEST_COLLECTION).all())
    physics_facts = [f for f in facts if "physics" in f.get("domains", [])]
    temp_facts = [f for f in facts if "temporary" in f.get("domains", [])]
    
    if physics_facts:
        assert all(f.get("decay_factor", 1.0) > 0.6 for f in physics_facts), "Protected facts should have higher protection"
    if temp_facts:
        assert all(f.get("decay_factor", 1.0) < 0.6 for f in temp_facts), "Temporary facts should have lower protection"

def test_importance_protection(memory_system):
    """Test that important facts decay more slowly."""
    apply_memory_decay(memory_system=memory_system, days_passed=100.0)
    
    facts = list(memory_system.db.collection(TEST_COLLECTION).all())
    high_importance = [f for f in facts if f.get("importance", 0) >= 0.7]
    low_importance = [f for f in facts if f.get("importance", 0) < 0.5]
    
    if not low_importance:
        assert True, "Low importance facts have been removed due to decay"
    else:
        high_ttls = [f.get("ttl_days", 0) for f in high_importance]
        low_ttls = [f.get("ttl_days", 0) for f in low_importance]
        assert min(high_ttls) > max(low_ttls), "Important facts should decay more slowly"

def test_boost_memories(memory_system):
    """Test boosting memories based on a query."""
    apply_memory_decay(memory_system, days_passed=60.0)
    facts_before = list(memory_system.db.collection(TEST_COLLECTION).all())
    
    elephant_fact = next((f for f in facts_before if "elephant" in f["content"].lower()), None)
    assert elephant_fact is not None, "Should have a fact about elephants"
    elephant_ttl_before = elephant_fact["ttl_days"]
    
    boosted_count = boost_memories(memory_system=memory_system, query="mammals animals nature", boost_amount=50.0)
    assert boosted_count > 0, "Should boost at least one memory"
    
    facts_after = list(memory_system.db.collection(TEST_COLLECTION).all())
    elephant_fact_after = next((f for f in facts_after if "elephant" in f["content"].lower()), None)
    assert elephant_fact_after is not None, "Should still have the elephant fact"
    assert elephant_fact_after["ttl_days"] > elephant_ttl_before, "TTL should be increased"
    assert elephant_fact_after.get("boost_history"), "Should have boost history"

def test_targeted_decay(memory_system):
    """Test applying targeted decay to specific domains."""
    affected = apply_targeted_decay(memory_system=memory_system, domain="temporary", factor=5.0)
    assert affected > 0, "Should affect at least one fact"
    
    facts = list(memory_system.db.collection(TEST_COLLECTION).all())
    temp_facts = [f for f in facts if "temporary" in f.get("domains", [])]
    other_facts = [f for f in facts if "temporary" not in f.get("domains", [])]
    
    avg_temp_ttl = sum(f.get("ttl_days", 0) for f in temp_facts) / len(temp_facts)
    avg_other_ttl = sum(f.get("ttl_days", 0) for f in other_facts) / len(other_facts)
    assert avg_temp_ttl < avg_other_ttl, "Temporary facts should decay much faster"
    
    for fact in temp_facts:
        assert "last_decay" in fact, "Should record decay information"
        assert fact["last_decay"]["type"] == "targeted", "Should mark as targeted decay"

def test_hybrid_search_decay_integration(memory_system):
    """Test that memory decay properly affects hybrid search results."""
    temporary_fact = memory_system.remember(
        content="The next AI conference is on November 10, 2023.",
        importance=0.5,
        confidence=0.8,
        domains=["ai", "events", "temporary"],
        ttl_days=30.0
    )
    permanent_fact = memory_system.remember(
        content="AI conferences typically focus on machine learning, neural networks, and recent advances in artificial intelligence.",
        importance=0.8,
        confidence=0.9,
        domains=["ai", "events"],
        ttl_days=365.0
    )
    
    initial_results = memory_system.hybrid_search("AI conferences and events")
    assert len(initial_results) >= 2, "Should find both facts initially"
    assert any(r["_id"] == temporary_fact for r in initial_results), "Should find temporary fact initially"
    assert any(r["_id"] == permanent_fact for r in initial_results), "Should find permanent fact initially"
    
    apply_memory_decay(memory_system=memory_system, days_passed=60.0)
    
    decayed_results = memory_system.hybrid_search("AI conferences and events")
    assert any(r["_id"] == permanent_fact for r in decayed_results), "Should still find permanent fact"
    
    temporary_found = any(r["_id"] == temporary_fact for r in decayed_results)
    if temporary_found:
        temp_rank = next(i for i, r in enumerate(decayed_results) if r["_id"] == temporary_fact)
        perm_rank = next(i for i, r in enumerate(decayed_results) if r["_id"] == permanent_fact)
        assert temp_rank > perm_rank, "Decayed fact should rank lower than permanent fact"

def test_search_boost_decay_interaction(memory_system):
    """Test interaction between search relevance boosting and memory decay."""
    facts = [
        {
            "content": "Python is a popular programming language.",
            "importance": 0.8,
            "confidence": 0.9,
            "domains": ["programming", "technology"],
            "ttl_days": 365.0
        },
        {
            "content": "Python 3.9 was released in October 2020.",
            "importance": 0.6,
            "confidence": 0.9,
            "domains": ["programming", "technology", "history"],
            "ttl_days": 180.0
        },
        {
            "content": "Python 4.0 is rumored to be in development.",
            "importance": 0.4,
            "confidence": 0.5,
            "domains": ["programming", "technology", "rumors"],
            "ttl_days": 30.0
        }
    ]
    
    fact_ids = []
    for fact in facts:
        fact_id = memory_system.remember(**fact)
        fact_ids.append(fact_id)
    
    initial_results = memory_system.hybrid_search("Python programming language versions")
    
    apply_memory_decay(memory_system=memory_system, days_passed=45.0)
    
    boost_memories(memory_system=memory_system, query="Python version release", boost_amount=90.0, limit=5)
    
    boosted_results = memory_system.hybrid_search("Python programming language versions")
    assert len(boosted_results) >= 2, "Should find at least two facts"
    
    general_rank = next(i for i, r in enumerate(boosted_results) if r["_id"] == fact_ids[0])
    version_rank = next(i for i, r in enumerate(boosted_results) if r["_id"] == fact_ids[1])
    rumor_rank = next((i for i, r in enumerate(boosted_results) if r["_id"] == fact_ids[2]), len(boosted_results))
    
    assert general_rank < rumor_rank, "General fact should rank higher than rumor"
    assert version_rank < rumor_rank, "Version release fact should rank higher than rumor"

def test_domain_preservation_search(memory_system):
    """Test that domain preservation properly affects search results."""
    physics_fact = memory_system.remember(
        content="The speed of light in vacuum is approximately 299,792,458 meters per second.",
        importance=0.8,
        confidence=0.95,
        domains=["physics", "science"],
        ttl_days=730.0
    )
    temp_physics_fact = memory_system.remember(
        content="Recent experiment suggests slight variation in light speed in new metamaterial.",
        importance=0.6,
        confidence=0.7,
        domains=["physics", "science", "temporary"],
        ttl_days=60.0
    )
    
    apply_memory_decay(memory_system=memory_system, days_passed=90.0, domains_to_preserve=["physics"])
    
    results = memory_system.hybrid_search("speed of light physics")
    assert any(r["_id"] == physics_fact for r in results), "Should find permanent physics fact"
    assert any(r["_id"] == temp_physics_fact for r in results), "Should find temporary physics fact"
    
    physics_rank = next(i for i, r in enumerate(results) if r["_id"] == physics_fact)
    temp_rank = next(i for i, r in enumerate(results) if r["_id"] == temp_physics_fact)
    assert physics_rank < temp_rank, "Permanent fact should rank higher than temporary fact"

def test_hybrid_search_debug(memory_system):
    """Debug test to check what hybrid_search returns for a specific query."""
    # Initialize the memory system with sample facts
    for fact in SAMPLE_FACTS:
        memory_system.remember(**fact)
    
    # Run the hybrid search with the test query
    query = "mammals animals nature"
    results = memory_system.hybrid_search(query, threshold=0.01, limit=10)
    
    # Force print to console even in pytest
    import sys
    # Print detailed information about results
    print("\nHybrid Search Debug Results:", file=sys.stderr)
    print(f"Query: '{query}'", file=sys.stderr)
    print(f"Number of results: {len(results)}", file=sys.stderr)
    
    for i, result in enumerate(results):
        print(f"\nResult {i+1}:", file=sys.stderr)
        print(f"Content: {result.get('content')}", file=sys.stderr)
        print(f"Score: {result.get('score')}", file=sys.stderr)
        if 'components' in result:
            comp = result['components']
            print(f"Component scores - Semantic: {comp.get('semantic_score')}, BM25: {comp.get('bm25_score')}, "
                  f"Glossary: {comp.get('glossary_score')}, Importance: {comp.get('importance_boost')}", file=sys.stderr)
    
    # Debug direct simple find
    elephant_fact = memory_system.db.collection(TEST_COLLECTION).find({"content": {"LIKE": "%elephant%"}})
    elephant_list = [doc for doc in elephant_fact]
    print(f"\nDirect query for elephant facts found: {len(elephant_list)}", file=sys.stderr)
    for fact in elephant_list:
        print(f"Elephant fact content: {fact.get('content')}", file=sys.stderr)
        print(f"Elephant fact domains: {fact.get('domains')}", file=sys.stderr)
        print(f"Elephant fact importance: {fact.get('importance')}", file=sys.stderr)
        print(f"Elephant fact embedding present: {'Yes' if fact.get('embedding') else 'No'}", file=sys.stderr)
    
    # Test if fact is found via simple direct matching
    domains_match = False
    content_match = False
    for domain in SAMPLE_FACTS[0]['domains']:
        if domain.lower() in query.lower():
            domains_match = True
    
    for term in query.lower().split():
        if term in SAMPLE_FACTS[0]['content'].lower():
            content_match = True
    
    print(f"\nDirect term matching:", file=sys.stderr)
    print(f"Domain match: {domains_match}", file=sys.stderr)
    print(f"Content match: {content_match}", file=sys.stderr)
    
    # Assert something to satisfy pytest
    assert True
